{
  "assert": {
    "prefix": "ass",
    "body": "assert(${1:actual}${2:, ${3:message}});",
    "description": "An alias of assert.ok()."
  },
  "deepEqual": {
    "prefix": "ade",
    "body": "assert.deepEqual(${1:actual}, ${2:expected}${3:, ${4:message}});",
    "description": "Tests for deep equality between the actual and expected parameters. Primitive values are compared with the equal comparison operator ( == )."
  },
  "deepStrictEqual": {
    "prefix": "adse",
    "body": "assert.deepStrictEqual(${1:actual}, ${2:expected}${3:, ${4:message}});",
    "description": "Generally identical to assert.deepEqual() with two exceptions. First, primitive values are compared using the strict equality operator ( === ). Second, object comparisons include a strict equality check of their prototypes."
  },
  "doesNotThrow": {
    "prefix": "adnt",
    "body": "assert.doesNotThrow(${1:block}${2:, ${3:error}}${4:, ${5:message}});",
    "description": "Asserts that the function block does not throw an error. See assert.throws() for more details."
  },
  "equal": {
    "prefix": "aeq",
    "body": "assert.equal(${1:actual}, ${2:expected}${3:, ${4:message}});",
    "description": "Tests shallow, coercive equality between the actual and expected parameters using the equal comparison operator ( == )"
  },
  "fail": {
    "prefix": "afa",
    "body": "assert.fail(${1:actual}, ${2:expected}, ${3:message}, ${4:operator});",
    "description": "Throws an AssertionError. If message is falsy, the error message is set as the values of actual and expected separated by the provided operator. Otherwise, the error message is the value of message."
  },
  "ifError": {
    "prefix": "aif",
    "body": "assert.ifError(${1:value});",
    "description": "Throws value if value is truthy. This is useful when testing the error argument in callbacks."
  },
  "notDeepEqual": {
    "prefix": "ande",
    "body": "assert.notDeepEqual(${1:actual}, ${2:expected}${3:, ${4:message}});",
    "description": "Tests for any deep inequality. Opposite of assert.deepEqual()."
  },
  "notDeepStrictEqual": {
    "prefix": "andse",
    "body": "assert.notDeepStrictEqual(${1:actual}, ${2:expected}${3:, ${4:message}});",
    "description": "Tests for deep strict inequality. Opposite of assert.deepStrictEqual()."
  },
  "notEqual": {
    "prefix": "ane",
    "body": "assert.notEqual(${1:actual}, ${2:expected}${3:, ${4:message}});",
    "description": "Tests shallow, coercive inequality with the not equal comparison operator ( != )."
  },
  "notStrictEqual": {
    "prefix": "anse",
    "body": "assert.notStrictEqual(${1:actual}, ${2:expected}${3:, ${4:message}});",
    "description": "Tests strict inequality as determined by the strict not equal operator ( !== )."
  },
  "ok": {
    "prefix": "aok",
    "body": "assert.ok(${1:actual}${2:, ${3:message}});",
    "description": "Tests if value is truthy. It is equivalent to assert.equal(!!value, true, message). If value is not truthy, an AssertionError is thrown with a message property set equal to the value of the message parameter. If the message parameter is undefined, a default error message is assigned."
  },
  "strictEqual": {
    "prefix": "ase",
    "body": "assert.strictEqual(${1:actual}, ${2:expected}${3:, ${4:message}});",
    "description": "Tests strict equality as determined by the strict equality operator ( === )."
  },
  "throws": {
    "prefix": "ath",
    "body": "assert.throws(${1:block}${2:, ${3:error}}${4:, ${5:message}});",
    "description": "Expects the function block to throw an error. If specified, error can be a constructor, RegExp, or validation function."
  }
}
